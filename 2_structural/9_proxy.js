/* прокси позволяют перехватывать выполнение функции
* и в данном случаее есть сервер и есть кеш на клиенте
* что бы постоянно не ждать ответ с сервера
* если такой запрос есть в кеше тогда дата отдается с кеша а не с сервера
*/

//Функция имуляции ответа с сервера по запрошеному юрл
function networkFetch(url) {
    return `${url} - ответ с сервера`
}
//перечень который хранит юрл уже сохраненых ответов сервера в кеше
const cahe = new Set()
// Прокси принимает функцию которую нужно перехватить в данном случаее это запрос на сервер
const proxiedFethc = new Proxy(networkFetch,
    //Хендлер для прокси
    {

        //Метод handler.apply() является ловушкой для вызова функции.
        // которая принимает саму функцию - target, контекст - thisArg и параметры передаваемые функции - argArray
        apply(target, thisArg, argArray) {
            // с параметров вытаскиваем юрл
        const url = argArray[0]
            // узнаем есть ли сохранненые данные по этому юрл в кеше
        if(cahe.has(url)){
            //если есть отдаем данные с кеша клиенту
            return `${url} - Ответ из кэша`
        }
        else{
            //иначе данных нет и нужно сделать запрос на сервер добавив юрл в кеш
            cahe.add(url)
            // отдаем данные клиенту после получения данных с сервера
            return Reflect.apply(target,thisArg,argArray)
        }
    }
})

console.log(proxiedFethc('angular.io'))
console.log(proxiedFethc('react.io'))
console.log(proxiedFethc('angular.io'))

// angular.io - ответ с сервера
// react.io - ответ с сервера
// angular.io - Ответ из кэша
